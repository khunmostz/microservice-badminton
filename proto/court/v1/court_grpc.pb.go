// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: court/v1/court.proto

package courtv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourtService_CreateCourt_FullMethodName = "/court.v1.CourtService/CreateCourt"
	CourtService_GetCourt_FullMethodName    = "/court.v1.CourtService/GetCourt"
	CourtService_ListCourts_FullMethodName  = "/court.v1.CourtService/ListCourts"
	CourtService_UpdateCourt_FullMethodName = "/court.v1.CourtService/UpdateCourt"
	CourtService_DeleteCourt_FullMethodName = "/court.v1.CourtService/DeleteCourt"
)

// CourtServiceClient is the client API for CourtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourtServiceClient interface {
	CreateCourt(ctx context.Context, in *CreateCourtRequest, opts ...grpc.CallOption) (*CreateCourtResponse, error)
	GetCourt(ctx context.Context, in *GetCourtRequest, opts ...grpc.CallOption) (*GetCourtResponse, error)
	ListCourts(ctx context.Context, in *ListCourtsRequest, opts ...grpc.CallOption) (*ListCourtsResponse, error)
	UpdateCourt(ctx context.Context, in *UpdateCourtRequest, opts ...grpc.CallOption) (*UpdateCourtResponse, error)
	DeleteCourt(ctx context.Context, in *DeleteCourtRequest, opts ...grpc.CallOption) (*DeleteCourtResponse, error)
}

type courtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourtServiceClient(cc grpc.ClientConnInterface) CourtServiceClient {
	return &courtServiceClient{cc}
}

func (c *courtServiceClient) CreateCourt(ctx context.Context, in *CreateCourtRequest, opts ...grpc.CallOption) (*CreateCourtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourtResponse)
	err := c.cc.Invoke(ctx, CourtService_CreateCourt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courtServiceClient) GetCourt(ctx context.Context, in *GetCourtRequest, opts ...grpc.CallOption) (*GetCourtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourtResponse)
	err := c.cc.Invoke(ctx, CourtService_GetCourt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courtServiceClient) ListCourts(ctx context.Context, in *ListCourtsRequest, opts ...grpc.CallOption) (*ListCourtsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCourtsResponse)
	err := c.cc.Invoke(ctx, CourtService_ListCourts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courtServiceClient) UpdateCourt(ctx context.Context, in *UpdateCourtRequest, opts ...grpc.CallOption) (*UpdateCourtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourtResponse)
	err := c.cc.Invoke(ctx, CourtService_UpdateCourt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courtServiceClient) DeleteCourt(ctx context.Context, in *DeleteCourtRequest, opts ...grpc.CallOption) (*DeleteCourtResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourtResponse)
	err := c.cc.Invoke(ctx, CourtService_DeleteCourt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourtServiceServer is the server API for CourtService service.
// All implementations must embed UnimplementedCourtServiceServer
// for forward compatibility.
type CourtServiceServer interface {
	CreateCourt(context.Context, *CreateCourtRequest) (*CreateCourtResponse, error)
	GetCourt(context.Context, *GetCourtRequest) (*GetCourtResponse, error)
	ListCourts(context.Context, *ListCourtsRequest) (*ListCourtsResponse, error)
	UpdateCourt(context.Context, *UpdateCourtRequest) (*UpdateCourtResponse, error)
	DeleteCourt(context.Context, *DeleteCourtRequest) (*DeleteCourtResponse, error)
	mustEmbedUnimplementedCourtServiceServer()
}

// UnimplementedCourtServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourtServiceServer struct{}

func (UnimplementedCourtServiceServer) CreateCourt(context.Context, *CreateCourtRequest) (*CreateCourtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourt not implemented")
}
func (UnimplementedCourtServiceServer) GetCourt(context.Context, *GetCourtRequest) (*GetCourtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourt not implemented")
}
func (UnimplementedCourtServiceServer) ListCourts(context.Context, *ListCourtsRequest) (*ListCourtsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourts not implemented")
}
func (UnimplementedCourtServiceServer) UpdateCourt(context.Context, *UpdateCourtRequest) (*UpdateCourtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourt not implemented")
}
func (UnimplementedCourtServiceServer) DeleteCourt(context.Context, *DeleteCourtRequest) (*DeleteCourtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourt not implemented")
}
func (UnimplementedCourtServiceServer) mustEmbedUnimplementedCourtServiceServer() {}
func (UnimplementedCourtServiceServer) testEmbeddedByValue()                      {}

// UnsafeCourtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourtServiceServer will
// result in compilation errors.
type UnsafeCourtServiceServer interface {
	mustEmbedUnimplementedCourtServiceServer()
}

func RegisterCourtServiceServer(s grpc.ServiceRegistrar, srv CourtServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourtServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourtService_ServiceDesc, srv)
}

func _CourtService_CreateCourt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourtServiceServer).CreateCourt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourtService_CreateCourt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourtServiceServer).CreateCourt(ctx, req.(*CreateCourtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourtService_GetCourt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourtServiceServer).GetCourt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourtService_GetCourt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourtServiceServer).GetCourt(ctx, req.(*GetCourtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourtService_ListCourts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourtServiceServer).ListCourts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourtService_ListCourts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourtServiceServer).ListCourts(ctx, req.(*ListCourtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourtService_UpdateCourt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourtServiceServer).UpdateCourt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourtService_UpdateCourt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourtServiceServer).UpdateCourt(ctx, req.(*UpdateCourtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourtService_DeleteCourt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourtServiceServer).DeleteCourt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourtService_DeleteCourt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourtServiceServer).DeleteCourt(ctx, req.(*DeleteCourtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourtService_ServiceDesc is the grpc.ServiceDesc for CourtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "court.v1.CourtService",
	HandlerType: (*CourtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourt",
			Handler:    _CourtService_CreateCourt_Handler,
		},
		{
			MethodName: "GetCourt",
			Handler:    _CourtService_GetCourt_Handler,
		},
		{
			MethodName: "ListCourts",
			Handler:    _CourtService_ListCourts_Handler,
		},
		{
			MethodName: "UpdateCourt",
			Handler:    _CourtService_UpdateCourt_Handler,
		},
		{
			MethodName: "DeleteCourt",
			Handler:    _CourtService_DeleteCourt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "court/v1/court.proto",
}
